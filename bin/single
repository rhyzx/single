#!/usr/bin/env node
var single  = require('../')
  , path    = require('path')
  , fs      = require('fs')
;

//modules for building
var modules = [];

//define options and usage
var argv = require('optimist').wrap(80)
    .usage([
        'Usage: single [options] [ -o script.js ] files.js..'
      , '   or: single [options] [ -o script.js ] -i single.json'
    ].join('\n'))

    .options('main', {
        type    : 'string'
      , describe: 'absolute path or alias of module to exports'
      , default : 'single'
    })
    .options('name', {
        type    : 'string'
      , describe: 'exports main module with specified name(for window.name or AMD define), '
                + 'equal to {main} if not set'
    })

    .options('outfile', {
        alias   : 'o'
      , type    : 'string'
      , describe: 'Place output in file, equal to {name} if not set'
    })
    .options('input-file', {
        alias   : 'i'
      , type    : 'string'
      , describe: 'Define options and file list in a json file\n'
                + 'Use "single.json" when no files inputed'
      , default : 'single.json'
    })
    .options('watch', {
        alias   : 'w'
      , type    : 'boolean'
      , describe: 'Watch mode'
      , default : false
    })
    .options('compress', {
        alias   : 'x'
      , type    : 'boolean'
      , describe: 'Compress with UglifyJS'
      , default : false
    })
    .options('charset', {
        type    : 'string'
      , describe: 'Charset of files'
      , default : 'utf8'
    })

    /*.options('v', {
        alias   : 'verbose'
      , type    : 'boolean'
      , describe: 'Verbose'
    })*/
    .options('version', {
        type    : 'boolean'
      , describe: 'Print version'
    })
    .options('help', {
        alias   : 'h'
      , type    : 'boolean'
      , describe: 'Print help'
    })

    .check(function (argv) {
        if (argv.version) throw single.version;
    })
    .check(function (argv) {
        if (argv.help) throw '';
    })
    .check(function (argv) {
        if (argv._.length < 1) {
            if(!fs.existsSync(argv.i)) throw 'No files inputed';

            // read input.json
            var input = require(path.resolve(argv.i));

            modules         = input.modules;
            argv.main       = argv.main     || input.main;
            argv.name       = argv.name     || input.name;

            argv.outfile    = argv.outfile  || input.outfile;
            argv.watch      = argv.watch    || input.watch;
            argv.compress   = argv.compress || input.compress;
            argv.charset    = argv.charset  || input.charset;
        } else {
            for (var i=0, path; path=argv._[i++];) {
                modules.push({
                    path : path
                });
            }
        }
    })
    .check(function (argv) {
        argv.name       = argv.name     || argv.main
        argv.outfile    = argv.outfile  || path.basename(argv.name) +'.js'
    })
    .argv
;


//main
single(modules, {
    outfile : argv.outfile
  , watch   : argv.watch
  , compress: argv.compress
  , charset : argv.charset

  , main    : argv.main
  , name    : argv.name
});
